//
// +-------------------------------------------------------------------------+
// |   This file has been generated by The Interactive Disassembler (IDA)    |
// |           Copyright (c) 2017 Hex-Rays, <support@hex-rays.com>           |
// |                      License info: 48-3FBD-7F04-2C                      |
// |                      Jiang Ying, Personal license                       |
// +-------------------------------------------------------------------------+
//
//
//      This file should be used in the following way:
//         - reload executable into IDA with using switch -c
//         - use File, Load IDC file and load this file.
//
//      NOTE: This file doesn't contain all information from the database.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
  // set 'loading idc file' mode
  set_inf_attr(INF_GENFLAGS, INFFL_LOADIDC|get_inf_attr(INF_GENFLAGS));
  GenInfo();            // various settings
  Segments();           // segmentation
  Enums();              // enumerations
  Structures();         // structure types
  ApplyStrucTInfos();   // structure type infos
  Patches();            // manual patches
  SegRegs();            // segment register values
  Bytes();              // individual bytes (code,data)
  Functions();          // function definitions
  // clear 'loading idc file' mode
  set_inf_attr(INF_GENFLAGS, ~INFFL_LOADIDC&get_inf_attr(INF_GENFLAGS));
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        delete_all_segments();    // purge database
	set_processor_type("metapc", SETPROC_USER);
	set_inf_attr(INF_COMPILER, 6);
	set_inf_attr(INF_STRLIT_BREAK, 0xA);
	set_flag(INF_CMTFLAG, SW_ALLCMT, 0);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_VOID, 0);
	set_inf_attr(INF_XREFNUM, 0);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_AUTO, 1);
	set_inf_attr(INF_INDENT, 0);
	set_inf_attr(INF_COMMENT, 24);
	set_inf_attr(INF_MAXREF, 0x10);
	add_default_til("macosx64");
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	set_selector(0X1,0);
	set_selector(0X2,0);
	set_selector(0X3,0);
	set_selector(0X4,0);
	set_selector(0X5,0);
	set_selector(0X6,0);
	set_selector(0X7,0);
	set_selector(0X8,0);
	set_selector(0X9,0);
	set_selector(0XA,0);
	set_selector(0XB,0);
	set_selector(0XC,0);
	set_selector(0XD,0);
	;
	add_segm_ex(0X100000000,0X100000D00,0X8,2,1,2,ADDSEG_NOSREG);
	SegRename(0X100000000,"HEADER");
	SegClass (0X100000000,"DATA");
	set_segm_type(0X100000000,3);
	add_segm_ex(0X100000D00,0X100000ED9,0X3,2,3,2,ADDSEG_NOSREG);
	SegRename(0X100000D00,"__text");
	SegClass (0X100000D00,"CODE");
	SegDefReg(0x100000D00,"es",0x0);
	SegDefReg(0x100000D00,"ss",0x0);
	SegDefReg(0x100000D00,"ds",0x0);
	SegDefReg(0x100000D00,"fs",0x0);
	SegDefReg(0x100000D00,"gs",0x0);
	set_segm_type(0X100000D00,2);
	add_segm_ex(0X100000EDA,0X100000EFE,0X4,2,2,2,ADDSEG_NOSREG);
	SegRename(0X100000EDA,"__stubs");
	SegClass (0X100000EDA,"CODE");
	SegDefReg(0x100000EDA,"es",0x0);
	SegDefReg(0x100000EDA,"ss",0x0);
	SegDefReg(0x100000EDA,"ds",0x0);
	SegDefReg(0x100000EDA,"fs",0x0);
	SegDefReg(0x100000EDA,"gs",0x0);
	set_segm_type(0X100000EDA,2);
	add_segm_ex(0X100000F00,0X100000F4C,0X5,2,5,2,ADDSEG_NOSREG);
	SegRename(0X100000F00,"__stub_helper");
	SegClass (0X100000F00,"CODE");
	SegDefReg(0x100000F00,"es",0x0);
	SegDefReg(0x100000F00,"ss",0x0);
	SegDefReg(0x100000F00,"ds",0x0);
	SegDefReg(0x100000F00,"fs",0x0);
	SegDefReg(0x100000F00,"gs",0x0);
	set_segm_type(0X100000F00,2);
	add_segm_ex(0X100000F4C,0X100000FB0,0X6,2,1,2,ADDSEG_NOSREG);
	SegRename(0X100000F4C,"__cstring");
	SegClass (0X100000F4C,"DATA");
	SegDefReg(0x100000F4C,"es",0x0);
	SegDefReg(0x100000F4C,"ss",0x0);
	SegDefReg(0x100000F4C,"ds",0x0);
	SegDefReg(0x100000F4C,"fs",0x0);
	SegDefReg(0x100000F4C,"gs",0x0);
	set_segm_type(0X100000F4C,3);
	add_segm_ex(0X100000FB0,0X100000FF8,0X7,2,5,2,ADDSEG_NOSREG);
	SegRename(0X100000FB0,"__unwind_info");
	SegClass (0X100000FB0,"__unwind_info");
	SegDefReg(0x100000FB0,"es",0x0);
	SegDefReg(0x100000FB0,"ss",0x0);
	SegDefReg(0x100000FB0,"ds",0x0);
	SegDefReg(0x100000FB0,"fs",0x0);
	SegDefReg(0x100000FB0,"gs",0x0);
	add_segm_ex(0X100001000,0X100001010,0XA,2,10,2,ADDSEG_NOSREG);
	SegRename(0X100001000,"__got");
	SegClass (0X100001000,"DATA");
	SegDefReg(0x100001000,"es",0x0);
	SegDefReg(0x100001000,"ss",0x0);
	SegDefReg(0x100001000,"ds",0x0);
	SegDefReg(0x100001000,"fs",0x0);
	SegDefReg(0x100001000,"gs",0x0);
	set_segm_type(0X100001000,3);
	add_segm_ex(0X100001010,0X100001020,0XB,2,10,2,ADDSEG_NOSREG);
	SegRename(0X100001010,"__nl_symbol_ptr");
	SegClass (0X100001010,"DATA");
	SegDefReg(0x100001010,"es",0x0);
	SegDefReg(0x100001010,"ss",0x0);
	SegDefReg(0x100001010,"ds",0x0);
	SegDefReg(0x100001010,"fs",0x0);
	SegDefReg(0x100001010,"gs",0x0);
	set_segm_type(0X100001010,3);
	add_segm_ex(0X100001020,0X100001050,0XC,2,10,2,ADDSEG_NOSREG);
	SegRename(0X100001020,"__la_symbol_ptr");
	SegClass (0X100001020,"DATA");
	SegDefReg(0x100001020,"es",0x0);
	SegDefReg(0x100001020,"ss",0x0);
	SegDefReg(0x100001020,"ds",0x0);
	SegDefReg(0x100001020,"fs",0x0);
	SegDefReg(0x100001020,"gs",0x0);
	set_segm_type(0X100001020,3);
	add_segm_ex(0X100001050,0X100001098,0XD,2,3,2,ADDSEG_NOSREG);
	SegRename(0X100001050,"UNDEF");
	SegClass (0X100001050,"XTRN");
	SegDefReg(0x100001050,"es",0x0);
	SegDefReg(0x100001050,"ss",0x0);
	SegDefReg(0x100001050,"ds",0x0);
	SegDefReg(0x100001050,"fs",0x0);
	SegDefReg(0x100001050,"gs",0x0);
	set_segm_type(0X100001050,1);
	set_inf_attr(INF_LOW_OFF, 0x100000000);
	set_inf_attr(INF_HIGH_OFF, 0x100001098);
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        begin_type_updating(UTP_ENUM);
        end_type_updating(UTP_ENUM);
}

static ApplyStrucTInfos_0(void) {
        auto id;
	id = get_struc_id("mach_header_64");
	SetType(get_member_id(id, 0x0), "uint32_t");
	SetType(get_member_id(id, 0x4), "cpu_type_t");
	SetType(get_member_id(id, 0x8), "cpu_subtype_t");
	SetType(get_member_id(id, 0xC), "uint32_t");
	SetType(get_member_id(id, 0x10), "uint32_t");
	SetType(get_member_id(id, 0x14), "uint32_t");
	SetType(get_member_id(id, 0x18), "uint32_t");
	SetType(get_member_id(id, 0x1C), "uint32_t");
	id = get_struc_id("segment_command_64");
	SetType(get_member_id(id, 0x0), "uint32_t");
	SetType(get_member_id(id, 0x4), "uint32_t");
	SetType(get_member_id(id, 0x8), "char[16]");
	SetType(get_member_id(id, 0x18), "uint64_t");
	SetType(get_member_id(id, 0x20), "uint64_t");
	SetType(get_member_id(id, 0x28), "uint64_t");
	SetType(get_member_id(id, 0x30), "uint64_t");
	SetType(get_member_id(id, 0x38), "vm_prot_t");
	SetType(get_member_id(id, 0x3C), "vm_prot_t");
	SetType(get_member_id(id, 0x40), "uint32_t");
	SetType(get_member_id(id, 0x44), "uint32_t");
	id = get_struc_id("section_64");
	SetType(get_member_id(id, 0x0), "char[16]");
	SetType(get_member_id(id, 0x10), "char[16]");
	SetType(get_member_id(id, 0x20), "uint64_t");
	SetType(get_member_id(id, 0x28), "uint64_t");
	SetType(get_member_id(id, 0x30), "uint32_t");
	SetType(get_member_id(id, 0x34), "uint32_t");
	SetType(get_member_id(id, 0x38), "uint32_t");
	SetType(get_member_id(id, 0x3C), "uint32_t");
	SetType(get_member_id(id, 0x40), "uint32_t");
	SetType(get_member_id(id, 0x44), "uint32_t");
	SetType(get_member_id(id, 0x48), "uint32_t");
	SetType(get_member_id(id, 0x4C), "uint32_t");
	id = get_struc_id("dyld_info_command");
	SetType(get_member_id(id, 0x0), "uint32_t");
	SetType(get_member_id(id, 0x4), "uint32_t");
	SetType(get_member_id(id, 0x8), "uint32_t");
	SetType(get_member_id(id, 0xC), "uint32_t");
	SetType(get_member_id(id, 0x10), "uint32_t");
	SetType(get_member_id(id, 0x14), "uint32_t");
	SetType(get_member_id(id, 0x18), "uint32_t");
	SetType(get_member_id(id, 0x1C), "uint32_t");
	SetType(get_member_id(id, 0x20), "uint32_t");
	SetType(get_member_id(id, 0x24), "uint32_t");
	SetType(get_member_id(id, 0x28), "uint32_t");
	SetType(get_member_id(id, 0x2C), "uint32_t");
	id = get_struc_id("symtab_command");
	SetType(get_member_id(id, 0x0), "uint32_t");
	SetType(get_member_id(id, 0x4), "uint32_t");
	SetType(get_member_id(id, 0x8), "uint32_t");
	SetType(get_member_id(id, 0xC), "uint32_t");
	SetType(get_member_id(id, 0x10), "uint32_t");
	SetType(get_member_id(id, 0x14), "uint32_t");
	id = get_struc_id("dysymtab_command");
	SetType(get_member_id(id, 0x0), "uint32_t");
	SetType(get_member_id(id, 0x4), "uint32_t");
	SetType(get_member_id(id, 0x8), "uint32_t");
	SetType(get_member_id(id, 0xC), "uint32_t");
	SetType(get_member_id(id, 0x10), "uint32_t");
	SetType(get_member_id(id, 0x14), "uint32_t");
	SetType(get_member_id(id, 0x18), "uint32_t");
	SetType(get_member_id(id, 0x1C), "uint32_t");
	SetType(get_member_id(id, 0x20), "uint32_t");
	SetType(get_member_id(id, 0x24), "uint32_t");
	SetType(get_member_id(id, 0x28), "uint32_t");
	SetType(get_member_id(id, 0x2C), "uint32_t");
	SetType(get_member_id(id, 0x30), "uint32_t");
	SetType(get_member_id(id, 0x34), "uint32_t");
	SetType(get_member_id(id, 0x38), "uint32_t");
	SetType(get_member_id(id, 0x3C), "uint32_t");
	SetType(get_member_id(id, 0x40), "uint32_t");
	SetType(get_member_id(id, 0x44), "uint32_t");
	SetType(get_member_id(id, 0x48), "uint32_t");
	SetType(get_member_id(id, 0x4C), "uint32_t");
	id = get_struc_id("dylinker_command");
	SetType(get_member_id(id, 0x0), "uint32_t");
	SetType(get_member_id(id, 0x4), "uint32_t");
	SetType(get_member_id(id, 0x8), "lc_str");
	id = get_struc_id("lc_str");
	SetType(get_member_id(id, 0x0), "uint32_t");
	id = get_struc_id("uuid_command");
	SetType(get_member_id(id, 0x0), "uint32_t");
	SetType(get_member_id(id, 0x4), "uint32_t");
	SetType(get_member_id(id, 0x8), "uint8_t[16]");
	id = get_struc_id("version_min_command");
	SetType(get_member_id(id, 0x0), "uint32_t");
	SetType(get_member_id(id, 0x4), "uint32_t");
	SetType(get_member_id(id, 0x8), "uint32_t");
	SetType(get_member_id(id, 0xC), "uint32_t");
	id = get_struc_id("linkedit_data_command");
	SetType(get_member_id(id, 0x0), "uint32_t");
	SetType(get_member_id(id, 0x4), "uint32_t");
	SetType(get_member_id(id, 0x8), "uint32_t");
	SetType(get_member_id(id, 0xC), "uint32_t");
	id = get_struc_id("dylib_command");
	SetType(get_member_id(id, 0x0), "uint32_t");
	SetType(get_member_id(id, 0x4), "uint32_t");
	SetType(get_member_id(id, 0x8), "dylib");
	id = get_struc_id("dylib");
	SetType(get_member_id(id, 0x0), "lc_str");
	SetType(get_member_id(id, 0x4), "uint32_t");
	SetType(get_member_id(id, 0x8), "uint32_t");
	SetType(get_member_id(id, 0xC), "uint32_t");
	id = get_struc_id("source_version_command");
	SetType(get_member_id(id, 0x0), "uint32_t");
	SetType(get_member_id(id, 0x4), "uint32_t");
	SetType(get_member_id(id, 0x8), "uint64_t");
	id = get_struc_id("namect");
	SetType(get_member_id(id, 0x0), "char[30]");
	SetType(get_member_id(id, 0x1E), "char[30]");
	SetType(get_member_id(id, 0x3C), "int");
	return id;
}

//------------------------------------------------------------------------
// Information about type information for structure members

static ApplyStrucTInfos() {
	ApplyStrucTInfos_0();
}

static Structures_0(id) {
        auto mid;

	id = add_struc(-1,"mach_header_64",0);
	id = add_struc(-1,"segment_command_64",0);
	id = add_struc(-1,"section_64",0);
	id = add_struc(-1,"dyld_info_command",0);
	id = add_struc(-1,"symtab_command",0);
	id = add_struc(-1,"dysymtab_command",0);
	id = add_struc(-1,"dylinker_command",0);
	id = add_struc(-1,"lc_str",1);
	id = add_struc(-1,"uuid_command",0);
	id = add_struc(-1,"version_min_command",0);
	id = add_struc(-1,"linkedit_data_command",0);
	id = add_struc(-1,"dylib_command",0);
	id = add_struc(-1,"dylib",0);
	id = add_struc(-1,"source_version_command",0);
	id = add_struc(-1,"namect",0);
	
	id = get_struc_id("mach_header_64");
	mid = add_struc_member(id,"magic",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cputype",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cpusubtype",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"filetype",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ncmds",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sizeofcmds",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"flags",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"reserved",	0X1C,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("segment_command_64");
	mid = add_struc_member(id,"cmd",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cmdsize",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"segname",	0X8,	0x50000400,	0,	16);
	mid = add_struc_member(id,"vmaddr",	0X18,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"vmsize",	0X20,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"fileoff",	0X28,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"filesize",	0X30,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"maxprot",	0X38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"initprot",	0X3C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"nsects",	0X40,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"flags",	0X44,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("section_64");
	mid = add_struc_member(id,"sectname",	0,	0x50000400,	0,	16);
	mid = add_struc_member(id,"segname",	0X10,	0x50000400,	0,	16);
	mid = add_struc_member(id,"addr",	0X20,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"size",	0X28,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"offset",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"align",	0X34,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"reloff",	0X38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"nreloc",	0X3C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"flags",	0X40,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"reserved1",	0X44,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"reserved2",	0X48,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"reserved3",	0X4C,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("dyld_info_command");
	mid = add_struc_member(id,"cmd",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cmdsize",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"rebase_off",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"rebase_size",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bind_off",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bind_size",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"weak_bind_off",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"weak_bind_size",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lazy_bind_off",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lazy_bind_size",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"export_off",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"export_size",	0X2C,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("symtab_command");
	mid = add_struc_member(id,"cmd",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cmdsize",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"symoff",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"nsyms",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"stroff",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"strsize",	0X14,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("dysymtab_command");
	mid = add_struc_member(id,"cmd",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cmdsize",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ilocalsym",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"nlocalsym",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"iextdefsym",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"nextdefsym",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"iundefsym",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"nundefsym",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"tocoff",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ntoc",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"modtaboff",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"nmodtab",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"extrefsymoff",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"nextrefsyms",	0X34,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"indirectsymoff",	0X38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"nindirectsyms",	0X3C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"extreloff",	0X40,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"nextrel",	0X44,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"locreloff",	0X48,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"nlocrel",	0X4C,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("lc_str");
	mid = add_struc_member(id,"offset",	0,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("dylinker_command");
	mid = add_struc_member(id,"cmd",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cmdsize",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"name",	0X8,	0x60000400,	get_struc_id("lc_str"),	4);
	set_struc_align(id,2);
	
	id = get_struc_id("uuid_command");
	mid = add_struc_member(id,"cmd",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cmdsize",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"uuid",	0X8,	0x000400,	-1,	16);
	set_struc_align(id,2);
	
	id = get_struc_id("version_min_command");
	mid = add_struc_member(id,"cmd",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cmdsize",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"version",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"reserved",	0XC,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("linkedit_data_command");
	mid = add_struc_member(id,"cmd",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cmdsize",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dataoff",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"datasize",	0XC,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("dylib");
	mid = add_struc_member(id,"name",	0,	0x60000400,	get_struc_id("lc_str"),	4);
	mid = add_struc_member(id,"timestamp",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"current_version",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"compatibility_version",	0XC,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("dylib_command");
	mid = add_struc_member(id,"cmd",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cmdsize",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dylib",	0X8,	0x60000400,	get_struc_id("dylib"),	16);
	set_struc_align(id,2);
	
	id = get_struc_id("source_version_command");
	mid = add_struc_member(id,"cmd",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cmdsize",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"version",	0X8,	0x30000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("namect");
	mid = add_struc_member(id,"fname",	0,	0x000400,	-1,	30);
	mid = add_struc_member(id,"lname",	0X1E,	0x000400,	-1,	30);
	mid = add_struc_member(id,"letters",	0X3C,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	return id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
        begin_type_updating(UTP_STRUCT);
	id = Structures_0(id);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	set_cmt	(0X100000000,	"Magic number",	0);
	update_extra_cmt		(0X100000000,	E_PREV + 0,	"; Mach-o header");
	create_dword	(x=0X100000000);
	op_hex		(x,	0);
	set_name	(0X100000000,	"__mh_execute_header");
	set_cmt	(0X100000004,	"CPU type: X86_64",	0);
	create_dword	(0X100000004);
	set_cmt	(0X100000008,	"CPU subtype",	0);
	create_dword	(0X100000008);
	set_cmt	(0X10000000C,	"File type: EXECUTE",	0);
	create_dword	(x=0X10000000C);
	op_hex		(x,	0);
	set_cmt	(0X100000010,	"Number of load commands",	0);
	create_dword	(x=0X100000010);
	op_hex		(x,	0);
	set_cmt	(0X100000014,	"Size of load commands",	0);
	create_dword	(x=0X100000014);
	op_hex		(x,	0);
	set_cmt	(0X100000018,	"Flags",	0);
	create_dword	(x=0X100000018);
	op_hex		(x,	0);
	set_cmt	(0X10000001C,	"Reserved",	0);
	create_dword	(x=0X10000001C);
	op_hex		(x,	0);
	update_extra_cmt		(0X100000020,	E_PREV + 0,	"; LC_SEGMENT_64 - 64-bit segment of this file to be mapped");
	MakeStruct	(0X100000020,	"segment_command_64");
	update_extra_cmt		(0X100000068,	E_PREV + 0,	"; LC_SEGMENT_64 - 64-bit segment of this file to be mapped");
	MakeStruct	(0X100000068,	"segment_command_64");
	update_extra_cmt		(0X1000000B0,	E_PREV + 0,	"; Sections");
	MakeStruct	(0X1000000B0,	"section_64");
	MakeStruct	(0X100000100,	"section_64");
	MakeStruct	(0X100000150,	"section_64");
	MakeStruct	(0X1000001A0,	"section_64");
	MakeStruct	(0X1000001F0,	"section_64");
	update_extra_cmt		(0X100000240,	E_PREV + 0,	"; LC_SEGMENT_64 - 64-bit segment of this file to be mapped");
	MakeStruct	(0X100000240,	"segment_command_64");
	update_extra_cmt		(0X100000288,	E_PREV + 0,	"; Sections");
	MakeStruct	(0X100000288,	"section_64");
	MakeStruct	(0X1000002D8,	"section_64");
	MakeStruct	(0X100000328,	"section_64");
	update_extra_cmt		(0X100000378,	E_PREV + 0,	"; LC_SEGMENT_64 - 64-bit segment of this file to be mapped");
	MakeStruct	(0X100000378,	"segment_command_64");
	update_extra_cmt		(0X1000003C0,	E_PREV + 0,	"; LC_DYLD_INFO - compressed dyld information");
	MakeStruct	(0X1000003C0,	"dyld_info_command");
	update_extra_cmt		(0X1000003F0,	E_PREV + 0,	"; LC_SYMTAB - link-edit stab symbol table info");
	MakeStruct	(0X1000003F0,	"symtab_command");
	update_extra_cmt		(0X100000408,	E_PREV + 0,	"; LC_DYSYMTAB - dynamic link-edit symbol table info");
	MakeStruct	(0X100000408,	"dysymtab_command");
	update_extra_cmt		(0X100000458,	E_PREV + 0,	"; LC_LOAD_DYLINKER - load a dynamic linker");
	MakeStruct	(0X100000458,	"dylinker_command");
	set_cmt	(0X100000464,	"library's path name",	0);
	create_strlit	(0X100000464,	0X100000472);
	set_name	(0X100000464,	"aUsrLibDyld");
	make_array	(0X100000472,	0X6);
	update_extra_cmt		(0X100000478,	E_PREV + 0,	"; LC_UUID - the uuid");
	MakeStruct	(0X100000478,	"uuid_command");
	update_extra_cmt		(0X100000490,	E_PREV + 0,	"; LC_VERSION_MIN_MACOSX - build for MacOSX min OS version");
	MakeStruct	(0X100000490,	"version_min_command");
	update_extra_cmt		(0X1000004A0,	E_PREV + 0,	"; LC_SOURCE_VERSION - source version used to build binary");
	MakeStruct	(0X1000004A0,	"linkedit_data_command");
	update_extra_cmt		(0X1000004B0,	E_PREV + 0,	"; LC_MAIN - replacement for LC_UNIXTHREAD");
	MakeStruct	(0X1000004B0,	"linkedit_data_command");
	update_extra_cmt		(0X1000004C8,	E_PREV + 0,	"; LC_LOAD_DYLIB - load a dynamically linked shared library");
	MakeStruct	(0X1000004C8,	"dylib_command");
	set_cmt	(0X1000004E0,	"library's path name",	0);
	create_strlit	(0X1000004E0,	0X1000004FB);
	set_name	(0X1000004E0,	"aUsrLibLibsyste");
	make_array	(0X1000004FB,	0X5);
	update_extra_cmt		(0X100000500,	E_PREV + 0,	"; LC_FUNCTION_STARTS - compressed table of function start addresses");
	MakeStruct	(0X100000500,	"linkedit_data_command");
	update_extra_cmt		(0X100000510,	E_PREV + 0,	"; LC_DATA_IN_CODE - table of non-instructions in __text");
	MakeStruct	(0X100000510,	"source_version_command");
	create_insn	(0X100000D00);
	set_name	(0X100000D00,	"main");
	create_insn	(x=0X100000D04);
	op_hex		(x,	1);
	set_cmt	(0X100000D08,	"pst",	0);
	create_insn	(x=0X100000D08);
	op_stkvar	(x,	1);
	create_insn	(x=0X100000D16);
	op_stkvar	(x,	0);
	create_insn	(x=0X100000D1A);
	op_stkvar	(x,	0);
	set_cmt	(0X100000D26,	"pst",	0);
	create_insn	(x=0X100000D26);
	op_stkvar	(x,	1);
	set_cmt	(0X100000D2F,	"pst",	0);
	create_insn	(x=0X100000D2F);
	op_stkvar	(x,	1);
	create_insn	(x=0X100000D42);
	op_stkvar	(x,	1);
	create_insn	(x=0X100000D51);
	op_hex		(x,	1);
	create_insn	(0X100000D57);
	make_array	(0X100000D5C,	0X4);
	create_insn	(0X100000D60);
	set_name	(0X100000D60,	"getinfo");
	create_insn	(x=0X100000D64);
	op_hex		(x,	1);
	create_insn	(x=0X100000D68);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X100000D6F);
	op_stkvar	(x,	0);
	set_cmt	(0X100000D73,	"char *",	0);
	set_cmt	(0X100000D7D,	"n",	0);
	set_cmt	(0X100000D82,	"st",	0);
	create_insn	(x=0X100000D82);
	op_stkvar	(x,	1);
	create_insn	(x=0X100000D86);
	op_stkvar	(x,	0);
	create_insn	(x=0X100000D8E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X100000D95);
	op_stkvar	(x,	0);
	set_cmt	(0X100000DA0,	"n",	0);
	create_insn	(x=0X100000DA5);
	op_stkvar	(x,	1);
	set_cmt	(0X100000DA9,	"st",	0);
	create_insn	(x=0X100000DAD);
	op_stkvar	(x,	0);
	create_insn	(x=0X100000DB5);
	op_stkvar	(x,	0);
	create_insn	(x=0X100000DB9);
	op_hex		(x,	1);
	create_insn	(0X100000DC0);
	set_name	(0X100000DC0,	"makeinfo");
	create_insn	(x=0X100000DC4);
	op_hex		(x,	1);
	create_insn	(x=0X100000DC8);
	op_stkvar	(x,	0);
	set_cmt	(0X100000DCC,	"char *",	0);
	create_insn	(x=0X100000DCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X100000DD5);
	op_stkvar	(x,	1);
	set_cmt	(0X100000DD9,	"char *",	0);
	create_insn	(x=0X100000DDD);
	op_stkvar	(x,	0);
	create_insn	(x=0X100000DE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X100000DEF);
	op_stkvar	(x,	1);
	create_insn	(x=0X100000DF6);
	op_hex		(x,	1);
	make_array	(0X100000DFC,	0X4);
	create_insn	(0X100000E00);
	set_name	(0X100000E00,	"showinfo");
	create_insn	(x=0X100000E04);
	op_hex		(x,	1);
	create_insn	(x=0X100000E08);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X100000E0F);
	op_stkvar	(x,	0);
	create_insn	(x=0X100000E13);
	op_stkvar	(x,	1);
	create_insn	(x=0X100000E17);
	op_stkvar	(x,	1);
	create_insn	(x=0X100000E1F);
	op_stkvar	(x,	1);
	create_insn	(x=0X100000E26);
	op_stkvar	(x,	0);
	set_cmt	(0X100000E2A,	"char *",	0);
	create_insn	(x=0X100000E2D);
	op_stkvar	(x,	1);
	create_insn	(x=0X100000E38);
	op_stkvar	(x,	0);
	create_insn	(x=0X100000E3B);
	op_hex		(x,	1);
	make_array	(0X100000E41,	0XF);
	create_insn	(0X100000E50);
	set_name	(0X100000E50,	"s_gets");
	create_insn	(x=0X100000E54);
	op_hex		(x,	1);
	create_insn	(x=0X100000E5F);
	op_stkvar	(x,	0);
	create_insn	(x=0X100000E63);
	op_stkvar	(x,	0);
	set_cmt	(0X100000E66,	"char *",	0);
	create_insn	(x=0X100000E66);
	op_stkvar	(x,	1);
	set_cmt	(0X100000E6A,	"int",	0);
	create_insn	(x=0X100000E6A);
	op_stkvar	(x,	1);
	set_cmt	(0X100000E6D,	"FILE *",	0);
	create_insn	(x=0X100000E75);
	op_stkvar	(x,	0);
	create_insn	(x=0X100000E79);
	op_stkvar	(x,	0);
	set_cmt	(0X100000E84,	"int",	0);
	set_cmt	(0X100000E89,	"char *",	0);
	create_insn	(x=0X100000E89);
	op_stkvar	(x,	1);
	create_insn	(x=0X100000E92);
	op_stkvar	(x,	0);
	create_insn	(x=0X100000E96);
	op_stkvar	(x,	0);
	create_insn	(x=0X100000EA1);
	op_stkvar	(x,	1);
	create_insn	(0X100000EAD);
	create_insn	(0X100000EB2);
	create_insn	(0X100000EC5);
	create_insn	(0X100000ECA);
	create_insn	(x=0X100000ECF);
	op_stkvar	(x,	1);
	create_insn	(x=0X100000ED3);
	op_hex		(x,	1);
	create_insn	(0X100000EDA);
	set_name	(0X100000EDA,	"___stack_chk_fail");
	create_insn	(0X100000EE0);
	set_name	(0X100000EE0,	"_fgets");
	create_insn	(0X100000EE6);
	set_name	(0X100000EE6,	"_getchar");
	create_insn	(0X100000EEC);
	set_name	(0X100000EEC,	"_printf");
	create_insn	(0X100000EF2);
	set_name	(0X100000EF2,	"_strchr");
	create_insn	(0X100000EF8);
	set_name	(0X100000EF8,	"_strlen");
	create_insn	(x=0X100000F00);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X100000F10);
	create_insn	(0X100000F1A);
	create_insn	(0X100000F24);
	create_insn	(0X100000F2E);
	create_insn	(0X100000F38);
	create_insn	(0X100000F42);
	create_strlit	(0X100000F4C,	0X100000F6B);
	set_name	(0X100000F4C,	"aPleaseEnterYou");
	create_strlit	(0X100000F6B,	0X100000F89);
	set_name	(0X100000F6B,	"aPleaseEnterYou_0");
	create_strlit	(0X100000F89,	0X100000FB0);
	set_name	(0X100000F89,	"aSSYourNameCont");
	create_qword	(x=0X100001000);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X100001000,	"___stack_chk_guard_ptr");
	create_qword	(x=0X100001008);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X100001008,	"___stdinp_ptr");
	create_qword	(x=0X100001010);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X100001010,	"dyld_stub_binder_ptr");
	create_qword	(x=0X100001018);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(x=0X100001020);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X100001020,	"___stack_chk_fail_ptr");
	create_qword	(x=0X100001028);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X100001028,	"_fgets_ptr");
	create_qword	(x=0X100001030);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X100001030,	"_getchar_ptr");
	create_qword	(x=0X100001038);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X100001038,	"_printf_ptr");
	create_qword	(x=0X100001040);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X100001040,	"_strchr_ptr");
	create_qword	(x=0X100001048);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X100001048,	"_strlen_ptr");
	update_extra_cmt		(0X100001050,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X100001050,	E_PREV + 1,	"; Imports from /usr/lib/libSystem.B.dylib");
	update_extra_cmt		(0X100001050,	E_PREV + 2,	"; ");
	create_qword	(0X100001050);
	set_name	(0X100001050,	"___stack_chk_guard");
	create_qword	(0X100001058);
	set_name	(0X100001058,	"___stdinp");
	create_qword	(0X100001060);
	set_name	(0X100001060,	"dyld_stub_binder");
	create_qword	(0X100001068);
	set_name	(0X100001068,	"__imp____stack_chk_fail");
	create_qword	(0X100001070);
	set_name	(0X100001070,	"__imp__fgets");
	create_qword	(0X100001078);
	set_name	(0X100001078,	"__imp__getchar");
	create_qword	(0X100001080);
	set_name	(0X100001080,	"__imp__printf");
	create_qword	(0X100001088);
	set_name	(0X100001088,	"__imp__strchr");
	create_qword	(0X100001090);
	set_name	(0X100001090,	"__imp__strlen");
}

static Functions_0(void) {

	add_func    (0X100000D00,0X100000D5C);
	set_func_flags(0X100000D00,0x4410);
	SetType(0X100000D00, "int __cdecl main(int argc, const char **argv, const char **envp);");
	set_frame_size(0X100000D00, 0X50, 8, 0);
	define_local_var(0X100000D00, 0X100000D5C, "[bp-0X48]", "person");
	add_func    (0X100000D60,0X100000DBF);
	set_func_flags(0X100000D60,0x4410);
	SetType(0X100000D60, "void __cdecl getinfo(namect *pst);");
	set_frame_size(0X100000D60, 0X30, 8, 0);
	define_local_var(0X100000D60, 0X100000DBF, "[bp-0X8]", "pst");
	add_func    (0X100000DC0,0X100000DFC);
	set_func_flags(0X100000DC0,0x4410);
	SetType(0X100000DC0, "void __cdecl makeinfo(namect *pst);");
	set_frame_size(0X100000DC0, 0X10, 8, 0);
	define_local_var(0X100000DC0, 0X100000DFC, "[bp-0X8]", "pst");
	add_func    (0X100000E00,0X100000E41);
	set_func_flags(0X100000E00,0x4410);
	SetType(0X100000E00, "void __cdecl showinfo(const namect *pst);");
	set_frame_size(0X100000E00, 0X20, 8, 0);
	define_local_var(0X100000E00, 0X100000E41, "[bp-0X8]", "pst");
	add_func    (0X100000E50,0X100000ED9);
	set_func_flags(0X100000E50,0x4410);
	SetType(0X100000E50, "char *__cdecl s_gets(char *st, int n);");
	set_frame_size(0X100000E50, 0X20, 8, 0);
	define_local_var(0X100000E50, 0X100000ED9, "[bp-0X20]", "find");
	define_local_var(0X100000E50, 0X100000ED9, "[bp-0X18]", "ret_val");
	define_local_var(0X100000E50, 0X100000ED9, "[bp-0XC]", "n");
	define_local_var(0X100000E50, 0X100000ED9, "[bp-0X8]", "st");
	add_func    (0X100000EDA,0X100000EE0);
	set_func_flags(0X100000EDA,0x4c1);
	add_func    (0X100000EE0,0X100000EE6);
	set_func_flags(0X100000EE0,0x4c0);
	SetType(0X100000EE0, "char *__cdecl fgets(char *, int, FILE *);");
	add_func    (0X100000EE6,0X100000EEC);
	set_func_flags(0X100000EE6,0x4c0);
	SetType(0X100000EE6, "int getchar(void);");
	add_func    (0X100000EEC,0X100000EF2);
	set_func_flags(0X100000EEC,0x4c0);
	SetType(0X100000EEC, "int printf(const char *, ...);");
	add_func    (0X100000EF2,0X100000EF8);
	set_func_flags(0X100000EF2,0x4c0);
	SetType(0X100000EF2, "char *__cdecl strchr(const char *, int);");
	add_func    (0X100000EF8,0X100000EFE);
	set_func_flags(0X100000EF8,0x4c0);
	SetType(0X100000EF8, "size_t __cdecl strlen(const char *);");
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
	split_sreg_range(0X100000000,"es",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X100000D00,"es",0,3);
	split_sreg_range(0X100000EDA,"es",0,3);
	split_sreg_range(0X100000F00,"es",0,3);
	split_sreg_range(0X100000F4C,"es",0,3);
	split_sreg_range(0X100000FB0,"es",0,3);
	split_sreg_range(0X100001000,"es",0,3);
	split_sreg_range(0X100001010,"es",0,3);
	split_sreg_range(0X100001020,"es",0,3);
	split_sreg_range(0X100001050,"es",0,3);
	split_sreg_range(0X100000000,"ss",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X100000D00,"ss",0,3);
	split_sreg_range(0X100000EDA,"ss",0,3);
	split_sreg_range(0X100000F00,"ss",0,3);
	split_sreg_range(0X100000F4C,"ss",0,3);
	split_sreg_range(0X100000FB0,"ss",0,3);
	split_sreg_range(0X100001000,"ss",0,3);
	split_sreg_range(0X100001010,"ss",0,3);
	split_sreg_range(0X100001020,"ss",0,3);
	split_sreg_range(0X100001050,"ss",0,3);
	split_sreg_range(0X100000000,"ds",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X100000D00,"ds",0,3);
	split_sreg_range(0X100000EDA,"ds",0,3);
	split_sreg_range(0X100000F00,"ds",0,3);
	split_sreg_range(0X100000F4C,"ds",0,3);
	split_sreg_range(0X100000FB0,"ds",0,3);
	split_sreg_range(0X100001000,"ds",0,3);
	split_sreg_range(0X100001010,"ds",0,3);
	split_sreg_range(0X100001020,"ds",0,3);
	split_sreg_range(0X100001050,"ds",0,3);
	split_sreg_range(0X100000000,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X100000D00,"fs",0,3);
	split_sreg_range(0X100000EDA,"fs",0,3);
	split_sreg_range(0X100000F00,"fs",0,3);
	split_sreg_range(0X100000F4C,"fs",0,3);
	split_sreg_range(0X100000FB0,"fs",0,3);
	split_sreg_range(0X100001000,"fs",0,3);
	split_sreg_range(0X100001010,"fs",0,3);
	split_sreg_range(0X100001020,"fs",0,3);
	split_sreg_range(0X100001050,"fs",0,3);
	split_sreg_range(0X100000000,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X100000D00,"gs",0,3);
	split_sreg_range(0X100000EDA,"gs",0,3);
	split_sreg_range(0X100000F00,"gs",0,3);
	split_sreg_range(0X100000F4C,"gs",0,3);
	split_sreg_range(0X100000FB0,"gs",0,3);
	split_sreg_range(0X100001000,"gs",0,3);
	split_sreg_range(0X100001010,"gs",0,3);
	split_sreg_range(0X100001020,"gs",0,3);
	split_sreg_range(0X100001050,"gs",0,3);
}

//------------------------------------------------------------------------
// Information about all patched bytes:

static Patches(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
        end_type_updating(UTP_STRUCT);
}

// End of file.
